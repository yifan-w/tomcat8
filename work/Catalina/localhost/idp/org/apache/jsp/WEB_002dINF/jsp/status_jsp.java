/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.42
 * Generated at: 2017-03-22 09:38:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;
import org.springframework.webflow.execution.RequestContext;
import org.opensaml.saml.metadata.resolver.ChainingMetadataResolver;
import org.opensaml.saml.metadata.resolver.MetadataResolver;
import org.opensaml.saml.metadata.resolver.RefreshableMetadataResolver;
import net.shibboleth.idp.Version;
import net.shibboleth.idp.saml.metadata.RelyingPartyMetadataProvider;
import net.shibboleth.idp.attribute.resolver.AttributeResolver;
import net.shibboleth.idp.attribute.resolver.DataConnector;
import net.shibboleth.idp.attribute.resolver.DataConnectorEx;
import net.shibboleth.utilities.java.support.component.IdentifiedComponent;
import net.shibboleth.utilities.java.support.service.ReloadableService;
import net.shibboleth.utilities.java.support.service.ServiceableComponent;

public final class status_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("net.shibboleth.idp.attribute.resolver.AttributeResolver");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.joda.time.DateTime");
    _jspx_imports_classes.add("org.opensaml.saml.metadata.resolver.MetadataResolver");
    _jspx_imports_classes.add("net.shibboleth.idp.attribute.resolver.DataConnectorEx");
    _jspx_imports_classes.add("net.shibboleth.idp.attribute.resolver.DataConnector");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("net.shibboleth.utilities.java.support.component.IdentifiedComponent");
    _jspx_imports_classes.add("org.joda.time.format.ISODateTimeFormat");
    _jspx_imports_classes.add("net.shibboleth.idp.saml.metadata.RelyingPartyMetadataProvider");
    _jspx_imports_classes.add("net.shibboleth.utilities.java.support.service.ReloadableService");
    _jspx_imports_classes.add("net.shibboleth.utilities.java.support.service.ServiceableComponent");
    _jspx_imports_classes.add("org.joda.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("org.opensaml.saml.metadata.resolver.ChainingMetadataResolver");
    _jspx_imports_classes.add("org.opensaml.saml.metadata.resolver.RefreshableMetadataResolver");
    _jspx_imports_classes.add("net.shibboleth.idp.Version");
    _jspx_imports_classes.add("org.springframework.webflow.execution.RequestContext");
    _jspx_imports_classes.add("java.util.Collection");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/plain; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


final RequestContext requestContext = (RequestContext) request.getAttribute("flowRequestContext");
final DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateTimeNoMillis();
final DateTime now = DateTime.now();
final DateTime startupTime = new DateTime(requestContext.getActiveFlow().getApplicationContext().getStartupDate());

      out.write("### Operating Environment Information\n");
      out.write("operating_system: ");
      out.print( System.getProperty("os.name") );
      out.write("\n");
      out.write("operating_system_version: ");
      out.print( System.getProperty("os.version") );
      out.write("\n");
      out.write("operating_system_architecture: ");
      out.print( System.getProperty("os.arch") );
      out.write("\n");
      out.write("jdk_version: ");
      out.print( System.getProperty("java.version") );
      out.write("\n");
      out.write("available_cores: ");
      out.print( Runtime.getRuntime().availableProcessors() );
      out.write("\n");
      out.write("used_memory: ");
      out.print( (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1048576 );
      out.write(" MB\n");
      out.write("maximum_memory: ");
      out.print( Runtime.getRuntime().maxMemory() / 1048576 );
      out.write(" MB\n");
      out.write("\n");
      out.write("### Identity Provider Information\n");
      out.write("idp_version: ");
      out.print( Version.getVersion() );
      out.write("\n");
      out.write("start_time: ");
      out.print( startupTime.toString(dateTimeFormatter) );
      out.write("\n");
      out.write("current_time: ");
      out.print( now.toString(dateTimeFormatter) );
      out.write("\n");
      out.write("uptime: ");
      out.print( now.getMillis() - startupTime.getMillis() );
      out.write(" ms\n");
      out.write("\n");

for (final ReloadableService service : (Collection<ReloadableService>) request.getAttribute("services")) {
    final DateTime successfulReload = service.getLastSuccessfulReloadInstant();
    final DateTime lastReload = service.getLastReloadAttemptInstant();
    final Throwable cause = service.getReloadFailureCause();

    out.println("service: " + ((IdentifiedComponent) service).getId());
    if (successfulReload != null) {
        out.println("last successful reload attempt: " + successfulReload.toString(dateTimeFormatter));
    }
    if (lastReload != null) {
        out.println("last reload attempt: " + lastReload.toString(dateTimeFormatter));
    }
    if (cause != null) {
        out.println("last failure cause: " + cause.getClass().getName() + ": " + cause.getMessage());
    }
    
    out.println();
    
    if (((IdentifiedComponent) service).getId().contains("Metadata")) {
        final ServiceableComponent<MetadataResolver> component = service.getServiceableComponent();
        if (null != component) {
            try {
                MetadataResolver rootResolver = component.getComponent();
                Collection<RefreshableMetadataResolver> resolvers = Collections.emptyList();
                
                // Step down into wrapping component.
                if (rootResolver instanceof RelyingPartyMetadataProvider) {
                    rootResolver = ((RelyingPartyMetadataProvider) rootResolver).getEmbeddedResolver();
                }
                
                if (rootResolver instanceof ChainingMetadataResolver) {
                    resolvers = new ArrayList<RefreshableMetadataResolver>();
                    for (final MetadataResolver childResolver : ((ChainingMetadataResolver) rootResolver).getResolvers()) {
                        if (childResolver instanceof RefreshableMetadataResolver) {
                            resolvers.add((RefreshableMetadataResolver) childResolver);
                        }
                    }
                } else if (rootResolver instanceof RefreshableMetadataResolver) {
                    resolvers = Collections.<RefreshableMetadataResolver>singletonList((RefreshableMetadataResolver) rootResolver);
                }
                
                for (final RefreshableMetadataResolver resolver : resolvers) {
                    final DateTime lastRefresh = resolver.getLastRefresh();
                    final DateTime lastUpdate = resolver.getLastUpdate();
    
                    out.println("\tmetadata source: " + resolver.getId());
                    if (lastRefresh != null) {
                        out.println("\tlast refresh attempt: " + lastRefresh.toString(dateTimeFormatter));
                    }
                    if (lastUpdate != null) {
                        out.println("\tlast update: " + lastUpdate.toString(dateTimeFormatter));
                    }
                    out.println();
                }
            } finally {
                component.unpinComponent();
            }
        }
    } else if (((IdentifiedComponent) service).getId().contains("AttributeResolver")) {
        final ServiceableComponent<AttributeResolver> component = service.getServiceableComponent();
        if (null != component) {
            try {
                AttributeResolver resolver = component.getComponent();
                final Collection<DataConnector> connectors = resolver.getDataConnectors().values();
                
                for (final DataConnector connector: connectors) {
                    if (connector instanceof DataConnectorEx) {
                        DataConnectorEx connectorEx = (DataConnectorEx) connector;
                    
                        final long lastFail = connectorEx.getLastFail();
                        if (0 != lastFail) {
                            DateTime failDateTime = new DateTime(lastFail);
                            out.println("\tDataConnector " +  connectorEx.getId() + ": last failed at " + failDateTime.toString(dateTimeFormatter));
                        } else {
                            out.println("\tDataConnector " +  connectorEx.getId() + ": has never failed");
                        }
                        out.println();
                    }
                }
            } finally {
                component.unpinComponent();
            }
        }
    
    }    
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
